# -*- coding: utf-8 -*-##################################################################################                                                                               ##    sale_automatic_workflow for OpenERP                                        ##    Copyright (C) 2011 Akretion SÃ©bastien BEAU <sebastien.beau@akretion.com>   ##    Copyright 2013 Camptocamp SA (Guewen Baconnier)                            ##                                                                               ##    This program is free software: you can redistribute it and/or modify       ##    it under the terms of the GNU Affero General Public License as             ##    published by the Free Software Foundation, either version 3 of the         ##    License, or (at your option) any later version.                            ##                                                                               ##    This program is distributed in the hope that it will be useful,            ##    but WITHOUT ANY WARRANTY; without even the implied warranty of             ##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ##    GNU Affero General Public License for more details.                        ##                                                                               ##    You should have received a copy of the GNU Affero General Public License   ##    along with this program.  If not, see <http://www.gnu.org/licenses/>.      ##                                                                               ##################################################################################import loggingfrom contextlib import contextmanagerfrom openerp.osv import ormfrom openerp import netsvc, _, workflow_logger = logging.getLogger(__name__)@contextmanagerdef commit(cr):	"""	Commit the cursor after the ``yield``, or rollback it if an	exception occurs.	Warning: using this method, the exceptions are logged then discarded.	"""	try:		yield	except Exception:		#cr.rollback()		_logger.exception('Error during an automatic workflow action.')	else:		cr.commit()class automatic_workflow_job(orm.Model):	""" Scheduler that will play automatically the validation of	invoices, pickings...  """	_name = 'automatic.workflow.job'	def _reconcile_invoices(self, cr, uid, ids=None, context=None):		invoice_obj = self.pool.get('account.invoice')		if ids is None:			ids = invoice_obj.search(cr, uid,									 [('state', 'in', ['open'])],									 context=context)		for invoice_id in ids:			with commit(cr):				invoice_obj.reconcile_invoice(cr, uid,											  [invoice_id],											  context=context)	def _validate_invoices(self, cr, uid, pick_id, context):		invoice_id = self.pool.get('account.invoice').search(cr,uid,[('origin','=',pick_id.name)])[0]		if invoice_id :			invoice_obj = self.pool.get('account.invoice')			_logger.debug('Invoices to validate: %s', invoice_id)			picking_obj = self.pool.get('stock.picking')			order_obj = self.pool.get('sale.order')			workflow.trg_validate(uid, 'account.invoice',	invoice_id, 'invoice_open', cr)			invoice = invoice_obj.browse(cr, uid,invoice_id, context=context)			order_ids = order_obj.search(cr, uid, [('id','=',pick_id.id)], context=context)			order = order_obj.browse(cr, uid,order_ids, context=context)			invoice_obj.write(cr, uid, invoice_id,{'immediate': True,												   'payment_term': order.payment_term.id or False,												   'partner_shipping_id' : order.partner_shipping_id.id or False,												   'carriage_condition_id' : order.carriage_condition_id.id or False,												   'goods_description_id' : order.goods_description_id.id or False,												   'transportation_reason_id' : order.transportation_reason_id.id or False,												   'transportation_method_id' : order.transportation_method_id.id or False,												   'carrier_id' : order.carrier_id.id or False,												   'dataora' : order.dataora,												   'internal_invoice_number' : order.internal_invoice_number or False												   })			invoice_obj.button_reset_taxes(cr,uid,invoice_id)		#else:		#	lines = []		#	for line in self.pool.get('sale.order.line').search(cr,uid,[('order_id', '=', pick_id)],context=context):		#		lines.append(line)		#	invoice_id = self.pool.get('sale.order')._make_invoice(cr, uid,self.pool.get('sale.order').browse(cr,uid,pick_id,context=context),lines, context=context)			# for record in self.pool.get('sale.order').browse(cr, uid, pick_id, context=context):			# 	invoice_id = invoice_obj.create(cr,uid, {	'name':record.name,			# 												'date_invoice':record.date_order,			# 												'partner_id': record.partner_id.id,			# 												'account_id': 33,			# 												'immediate': True,			# 												'payment_term': record.payment_term.id or False,			# 												'partner_shipping_id' : record.partner_shipping_id.id or False,			# 												'carriage_condition_id' : record.carriage_condition_id.id or False,			# 												'goods_description_id' : record.goods_description_id.id or False,			# 												'transportation_reason_id' : record.transportation_reason_id.id or False,			# 												'transportation_method_id' : record.transportation_method_id.id or False,			# 												'carrier_id' : record.carrier_id.id or False,			# 												'dataora' : record.dataora,			# 												'internal_invoice_number' : record.internal_invoice_number or False			# 										 })			# 	for line in record.order_line:			# 		invoice_obj.write(cr, uid, invoice_id, {'immediate': True,			# 										   'payment_term': line.payment_term.id or False,			# 										   'partner_shipping_id' : line.partner_shipping_id.id or False,			# 										   'carriage_condition_id' : line.carriage_condition_id.id or False,			# 										   'goods_description_id' : line.goods_description_id.id or False,			# 										   'transportation_reason_id' : line.transportation_reason_id.id or False,			# 										   'transportation_method_id' : line.transportation_method_id.id or False,			# 										   'carrier_id' : line.carrier_id.id or False,			# 										   'dataora' : line.dataora,			# 										   'internal_invoice_number' : line.internal_invoice_number or False			# 										   })			#invoice_obj.signal_workflow(cr,uid,invoice_id,'invoice_open',context)			#mod_obj = self.pool.get('ir.model.data')			#view_ref = mod_obj.get_object_reference(cr, uid,'account', 'invoice_form')			#view_id = view_ref[1] if view_ref else False			#res = {				  #'name':  _('Customer Invoice'),				  #'view_type': 'form',				  #'view_mode': 'form',				  #'view_id': view_ref[1] if view_ref else False,				  #'res_model': 'account.invoice',				  #'cont6519]ext': "{}",				  #'type': 'ir.actions.act_window',				  #'nodestroy': True,				  #'target': 'current',				  #'res_id': invoice_id or False,}##please replace record_id and provide the id of the record to be opened			#return res