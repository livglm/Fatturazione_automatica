# -*- coding: utf-8 -*-##################################################################################                                                                               ##    sale_automatic_workflow for OpenERP                                        ##    Copyright (C) 2011 Akretion SÃ©bastien BEAU <sebastien.beau@akretion.com>   ##    Copyright 2013 Camptocamp SA (Guewen Baconnier)#                                                                               ##    This program is free software: you can redistribute it and/or modify       ##    it under the terms of the GNU Affero General Public License as             ##    published by the Free Software Foundation, either version 3 of the         ##    License, or (at your option) any later version.                            ##                                                                               ##    This program is distributed in the hope that it will be useful,            ##    but WITHOUT ANY WARRANTY; without even the implied warranty of             ##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ##    GNU Affero General Public License for more details.                        ##                                                                               ##    You should have received a copy of the GNU Affero General Public License   ##    along with this program.  If not, see <http://www.gnu.org/licenses/>.      ##                                                                               ##################################################################################from openerp import models, fields, api, netsvc, _import timeclass res_partner_sale(models.Model):	_inherit = "res.partner"	is_carrier = fields.Boolean('Trasportatore')class sale_order(models.Model):	_inherit = "sale.order"	workflow_process_id = fields.Many2one('sale.workflow.process','Sale Workflow Process')	payment_term = fields.Many2one('account.payment.term', 'Payment Term')	partner_invoice_id = fields.Many2one('res.partner', 'Invoice Address',  required=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, help="Invoice address for current sales order.")	partner_shipping_id = fields.Many2one('res.partner', 'Delivery Address',  required=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, help="Delivery address for current sales order.")	fiscal_position = fields.Many2one('account.fiscal.position', 'Fiscal Position')	delivery_address_id = fields.Many2one('res.partner', string='Delivery Address', required=False)	carriage_condition_id = fields.Many2one('stock.incoterms', 'Incoterms')	goods_description_id = fields.Many2one('stock.picking.goods_description', 'Description of Goods')	transportation_reason_id = fields.Many2one('stock.picking.transportation_reason','Reason for Transportation')	transportation_method_id = fields.Many2one('stock.picking.transportation_method','Method of Transportation')	carrier_id = fields.Many2one('delivery.carrier', string='Carrier')	invoce_id = fields.Many2one('account.invoice')	dataora = fields.Datetime('Data e ora trasporto')		@api.multi	def action_cancel(self):		for sale in self.browse():			for inv in sale.invoice_ids:				inv.write({'state' :'draft'})		stock = self.env['stock.move'].search([('origin','=',self.name)])		for li in stock:			self.env.cr.execute('select quant_id from stock_quant_move_rel  where move_id = %s' % (li.id))			quant = self.env.cr.fetchall()			quant_lines = self.env['stock.quant'].search([('id','in',quant)])			for quant_line in quant_lines:				quant_line.unlink()			li.write({'state': 'draft'})			li.unlink()		pick = self.env['stock.picking'].search([('origin','=',self.name)])		for pi in pick:			pack = self.env['stock.pack.operation'].search([('picking_id','=',pi.id)])			pack.unlink()			pi.write({'state': 'draft'})			pi.unlink()		super(sale_order,self).action_cancel()							line = self.env['sale.order.line'].search([('order_id','=',self.id)])		print line		for ol in line:			print ol.id			ol.write({'state' :'draft'})		self.write({'state': 'draft'})	def _prepare_invoice(self, cr, uid, order, lines, context=None):		invoice_vals = super(sale_order, self)._prepare_invoice(cr, uid, order, lines, context=context)		workflow = order.workflow_process_id		if not workflow:			return invoice_vals		invoice_vals['workflow_process_id'] = workflow.id		if workflow.invoice_date_is_order_date:			invoice_vals['date_invoice'] = order.date_order		return invoice_vals	def _prepare_order_picking(self, cr, uid, order, context=None):		picking_vals = super(sale_order, self)._prepare_order_picking(cr, uid, order, context=context)				print order.workflow_process_id.id		if order.workflow_process_id:			picking_vals['workflow_process_id'] = order.workflow_process_id.id		return picking_vals	def onchange_payment_method_id(self, cr, uid, ids, payment_method_id, context=None):		values = super(sale_order, self).onchange_payment_method_id(cr, uid, ids, payment_method_id, context=context)		if not payment_method_id:			return values		method_obj = self.pool.get('payment.method')		method = method_obj.browse(cr, uid, payment_method_id, context=context)		workflow = method.workflow_process_id		if workflow:			values.setdefault('value', {})			values['value']['workflow_process_id'] = workflow.id		return values	def onchange_workflow_process_id(self, cr, uid, ids, workflow_process_id, context=None):		if not workflow_process_id:			return {}		result = {}		workflow_obj = self.pool.get('sale.workflow.process')		workflow = workflow_obj.browse(cr, uid, workflow_process_id, context=context)		if workflow.picking_policy:			result['picking_policy'] = workflow.picking_policy		if workflow.order_policy:			result['order_policy'] = workflow.order_policy		if workflow.invoice_quantity:			result['invoice_quantity'] = workflow.invoice_quantity		return {'value': result}	def test_create_invoice(self, cr, uid, ids):		""" Workflow condition: test if an invoice should be created,		based on the automatic workflow rules """		if isinstance(ids, (list, tuple)):			assert len(ids) == 1			ids = ids[0]		order = self.browse(cr, uid, ids)		if order.order_policy != 'manual' or not order.workflow_process_id:			return False		invoice_on = order.workflow_process_id.create_invoice_on		if invoice_on == 'on_order_confirm':			return True		elif invoice_on == 'on_picking_done' and order.shipped:			return True		return False			@api.multi	def action_button_confirm(self):		picking_vals = super(sale_order, self).action_button_confirm()		#print self.workflow_process_id.id		if self.workflow_process_id.id:			work = self.env['automatic.workflow.job']			sale_workflow = self.env['sale.workflow.process'].search([('id','=',self.workflow_process_id.id)])			for workflow in sale_workflow:				if workflow.validate_order:					print self.id					#work._validate_sale_orders(context=self.id)					wf_service = netsvc.LocalService("workflow")					sale_obj = self.pool.get('sale.order')					picking_obj = self.env['stock.picking']					wf_service.trg_validate(self._uid, 'sale.order',											self.id, 'order_confirm', self._cr)					pick_ids = picking_obj.search( [('origin','=',self.name)])					#pick_ids.write({'state': 'assigned'})					pick_ids.write({'workflow_process_id': self.workflow_process_id.id})					self.write({'state': 'done'})                    					#_logger.debug('Sale Orders to validate: %s', self.id)				if workflow.validate_picking:					print "pick"					work._validate_pickings(context=self.id)					order_line_obj = self.env['sale.order.line'].search([('order_id','=',self.id)])					for order_line in order_line_obj:						self.env.cr.execute('select invoice_id from sale_order_line_invoice_rel  where order_line_id = %s' % (order_line.id))						quant = self.env.cr.fetchall()						if quant:							account_line_obj = self.env['account.invoice.line'].search([('id','=',quant[0])])							account_line_obj.write({'price_unit': order_line.price_unit,'quantity':order_line.product_uom_qty,'discount':order_line.discount})																if workflow.validate_invoice:					work._validate_invoices()					work._reconcile_invoices()								#self.write({'state': 'done'})				#if workflow.validate_invoice:					invoice_obj = self.env['account.invoice']					invoice_id = invoice_obj.search([('origin','=',self.name)])					#print_in = invoice_id.env['report'].get_action(invoice_id, 'account.report_invoice')					print self.workflow_process_id.id					view_ref = self.env['ir.model.data'].get_object_reference('account', 'invoice_form')					view_id = view_ref[1] if view_ref else False					res = {						'name':  _('Customer Invoice'),						'view_type': 'form',						'view_mode': 'form',						'view_id': view_ref[1] if view_ref else False,						'res_model': 'account.invoice',						'context': "{}",						'type': 'ir.actions.act_window',						'nodestroy': True,						'target': 'current',						'res_id': invoice_id.id  or False,##please replace record_id and provide the id of the record to be opened					}					return res